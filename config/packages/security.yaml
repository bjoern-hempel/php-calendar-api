security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:

        # Login to get api token:
        # -----------------------
        # $ curl -X POST -H "Content-Type: application/json" http://localhost/api/v1/authentication_token \
        #     -d '{"email":"bjoern@hempel.li","password":"<PASSWORD>"}' | jq .
        token_get:
            pattern: ^/api/v1/token/get
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/v1/token/get
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Get new token with refresh token:
        # ---------------------------------
        # $ curl
        token_refresh:
            pattern: ^/api/v1/token/refresh
            stateless: true
            refresh_jwt: ~

        # Get new token with refresh token:
        # ---------------------------------
        # $ curl
        version:
            pattern: ^/api/v1/version
            stateless: true
            refresh_jwt: ~

        # Protect the api:
        # ----------------
        # $ curl -X 'GET' -s http://localhost/api/v1/calendars.json \
        #     -H 'accept: application/ld+json' -H 'Authorization: Bearer <TOKEN>'
        api:
            pattern: ^/api/v1
            stateless: true
            jwt: ~

        # Disable some elements from authentication:
        # ------------------------------------------
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # All other pages:
        # ----------------
        main:
            lazy: true
            stateless: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/api/v1/token/refresh, roles: PUBLIC_ACCESS } # Allows getting new tokens
        - { path: ^/api/v1/token/get, roles: PUBLIC_ACCESS } # Allows getting token with login
        - { path: ^/api/v1/version, roles: PUBLIC_ACCESS } # Allows getting the version
        - { path: ^/api/v1/contexts, roles: PUBLIC_ACCESS } # Allows getting the version
        - { path: ^/api/v1/, roles: '%env(resolve:JWT_ROLE)%' } # Protect all others pages
        - { path: ^/api/v1, roles: PUBLIC_ACCESS } # Allows getting the version

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
